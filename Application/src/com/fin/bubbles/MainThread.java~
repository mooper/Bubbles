//Copyright (c) 2011 Michael D. Hooper
//Released under MIT License

package com.fin.bubbles;

import android.graphics.Canvas;
import android.util.Log;
import android.view.SurfaceHolder;


/**
 * @author Mike Hooper
 *
 * The Main thread which contains the Bubble loop. The thread must have access to 
 * the surface view and holder to trigger events every game tick.
 */
public class MainThread extends Thread 
{
	
	private static final String TAG = MainThread.class.getSimpleName();

	// Surface holder that can access the physical surface
	private SurfaceHolder surfaceHolder;
	// The actual view that handles inputs
	// and draws to the surface
	private MainBubblePanel gamePanel;

	// flag to hold game state 
	private boolean running;
	public void setRunning(boolean running) 
	{
		this.running = running;
	}

	public MainThread(SurfaceHolder surfaceHolder, MainBubblePanel gamePanel) 
	{
		super();
		this.surfaceHolder = surfaceHolder;
		this.gamePanel = gamePanel;
	}

	@Override
	public void run() 
	{
		Canvas canvas;
		Log.d(TAG, "Starting bubble loop");
		while (running) 
		{
			canvas = null;
			// try locking the canvas for exclusive pixel editing
			// in the surface
			try 
			{
				canvas = this.surfaceHolder.lockCanvas();
				synchronized (surfaceHolder) 
				{
					// update game state 
					this.gamePanel.update();
					// render state to the screen
					// draws the canvas on the panel
					this.gamePanel.render(canvas);				
				}
			} 
			finally 
			{
				// in case of an exception the surface is not left in 
				// an inconsistent state
				if (canvas != null) 
				{
					surfaceHolder.unlockCanvasAndPost(canvas);
				}
			}	// end finally
		}
	}
	
}
